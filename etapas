{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'OK'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#from plxscripting.easy import *\n",
    "#s_i, g_i = new_server('localhost', 10000, password=r 'asdasdasd')\n",
    "\n",
    "s_i.new()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_geometry(H, slope1, e_crest, rev, slope2, toplayer1, toplayer2, bottomlayer):\n",
    "    # make geometry\n",
    "    # determine polygon shape\n",
    "    w_slope1 = H*slope1\n",
    "    w_slope2a = rev*slope2\n",
    "    w_slope2b = H*slope2\n",
    "    \n",
    "    x_left = 0\n",
    "    x_toe = x_left + 4*w_slope1\n",
    "    x_crest = x_toe + w_slope1\n",
    "    x_right = x_crest + 4*w_slope1\n",
    "    \n",
    "    w_crest = x_crest + e_crest\n",
    "    \n",
    "    x_relave = w_crest + w_slope2a\n",
    "    \n",
    "    x_muro = w_crest + w_slope2b\n",
    "    \n",
    "    # we make it in structure mode:\n",
    "    g_i.gotostructures()\n",
    "    # make polygons, start bottom left, counter clockwise\n",
    "    \n",
    "    top_points1 = []\n",
    "    top_points1.append([x_toe, 0])\n",
    "    top_points1.append([x_muro, 0])\n",
    "    top_points1.append([w_crest, toplayer1[\"L\"]])\n",
    "    top_points1.append([x_crest, toplayer1[\"L\"]])\n",
    "    \n",
    "    \n",
    "    toppolygon1, topsoil1 = g_i.polygon(*top_points1)\n",
    "    \n",
    "    \n",
    "    top_points2 = []\n",
    "    top_points2.append([x_muro, 0])\n",
    "    top_points2.append([x_right, 0])\n",
    "    top_points2.append([x_right, toplayer1[\"L\"]-rev])\n",
    "    top_points2.append([x_relave, toplayer1[\"L\"]-rev])\n",
    "    \n",
    "    toppolygon2, topsoil2 = g_i.polygon(*top_points2)\n",
    "    \n",
    "    \n",
    "    bottom_points = []\n",
    "    bottom_points.append([x_left, -bottomlayer[\"L\"]])\n",
    "    bottom_points.append([x_right, -bottomlayer[\"L\"]])\n",
    "    bottom_points.append([x_right, 0])\n",
    "    bottom_points.append([x_left, 0])\n",
    "    \n",
    "    bottompolygon, bottomsoil = g_i.polygon(*bottom_points)\n",
    "    \n",
    "    \n",
    "    return toppolygon1, toppolygon2, bottompolygon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_soilmaterial(soilinfo):\n",
    "    # Assume short term and no consolidation: Mohr Coulomb undrained B\n",
    "    # input: dict of cu, gamma and E\n",
    "    nu = 0.3\n",
    "    soilmodel = 2 # Mohr-Coulomb\n",
    "    drainagetype = 2 # Undrained B\n",
    "    Gref = soilinfo[\"E\"]/(2*(1+nu))\n",
    "    \n",
    "    soil_params = [(\"MaterialName\", soilinfo[\"name\"]),\n",
    "                  (\"SoilModel\", soilmodel),\n",
    "                  (\"DrainageType\", drainagetype),\n",
    "                  (\"gammaUnsat\", soilinfo[\"gamma\"]),\n",
    "                   (\"gammaSat\", soilinfo[\"gamma\"]),\n",
    "                  (\"Gref\", Gref),\n",
    "                  (\"nu\", nu),\n",
    "                  (\"cref\", soilinfo[\"cu\"])]\n",
    "    soil_material = g_i.soilmat(*soil_params)\n",
    "    \n",
    "    return soil_material"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_model(H, slope1, e_crest, rev, slope2, toplayer1, toplayer2, bottomlayer):\n",
    "    # make geometry\n",
    "    top_pg1, top_pg2, bottom_pg = make_geometry(H, slope1, e_crest, rev, slope2, toplayer1, toplayer2, bottomlayer)\n",
    "    \n",
    "    # assign materials\n",
    "    topmaterial1 = make_soilmaterial(toplayer1)\n",
    "    top_pg1.Soil.Material = topmaterial1\n",
    "    \n",
    "    topmaterial2 = make_soilmaterial(toplayer2)\n",
    "    top_pg2.Soil.Material = topmaterial2\n",
    "    \n",
    "    bottommaterial = make_soilmaterial(bottomlayer)\n",
    "    bottom_pg.Soil.Material = bottommaterial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def meshcalculateread():\n",
    "    # mesh\n",
    "    g_i.gotomesh()\n",
    "    g_i.mesh()\n",
    "    \n",
    "    # set up calculation\n",
    "    \n",
    "    g_i.gotostages()\n",
    "    \n",
    "    # initial phase\n",
    "    \n",
    "    g_i.InitialPhase.DeformCalcType = \"Gravity loading\"\n",
    "    g_i.activate(g_i.Soils, g_i.InitialPhase)\n",
    "    \n",
    "\n",
    "    # safety phase\n",
    "    safetyphase = g_i.phase(g_i.InitialPhase)\n",
    "    safetyphase.DeformCalcType = \"Safety\"\n",
    "    safetyphase.Identification = \"Factor of Safety\"\n",
    "    \n",
    "    safetyphase.Deform.UseDefaultIterationParams = False\n",
    "    safetyphase.Deform.MaxSteps = 50\n",
    "    \n",
    "    # calculate\n",
    "    g_i.calculate()\n",
    "    \n",
    "    # read result\n",
    "    FoS = safetyphase.Reached.SumMsf.value\n",
    "    \n",
    "    return FoS \n",
    "    #pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def determine_FactorOfSafety(H, slope1, e_crest, rev, slope2, toplayer1, toplayer2, bottomlayer):\n",
    "    s_i.new()\n",
    "    # make the model\n",
    "    make_model(H, slope1, e_crest, rev, slope2, toplayer1, toplayer2, bottomlayer)\n",
    "    \n",
    "    # run calculation and retrieve results \n",
    "    FoS = meshcalculateread()\n",
    "    return FoS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Slope 1:2 with H=12 and L=12: Factor of Safety: 1.77\n"
     ]
    }
   ],
   "source": [
    "# INPUT PARAMETERS\n",
    "slope1 = 2\n",
    "slope2 = 2\n",
    "H = 12\n",
    "L= 12\n",
    "rev = 2\n",
    "e_crest= 6\n",
    "\n",
    "toplayer1 = {\"name\": \"Top1\",\n",
    "           \"cu\": 50,\n",
    "           \"gamma\": 20,\n",
    "           \"L\": L,\n",
    "           \"E\": 5000}\n",
    "\n",
    "toplayer2 = {\"name\": \"Top2\",\n",
    "           \"cu\": 50,\n",
    "           \"gamma\": 20,\n",
    "           \"L\": L-rev,\n",
    "           \"E\": 5000}\n",
    "\n",
    "bottomlayer = {\"name\": \"Bottom\",\n",
    "               \"cu\": 100,\n",
    "               \"gamma\": 20,\n",
    "               \"L\": 20,\n",
    "               \"E\": 15000}\n",
    "\n",
    "FoS = determine_FactorOfSafety(H, slope1, e_crest, rev, slope2, toplayer1, toplayer2, bottomlayer)\n",
    "print(\"Slope 1:{} with H={} and L={}: Factor of Safety: {:.2f}\".format(slope1, H, L, FoS))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_geometry2(H, slope1, e_crest, rev, slope2, up1, up2, toplayer1, toplayer2):\n",
    "    # make geometry\n",
    "    # determine polygon shape\n",
    "    top1 = toplayer1[\"L\"]+up1\n",
    "    top2 = toplayer1[\"L\"]+up2\n",
    "    \n",
    "    w_slope1 = H*slope1\n",
    "    w_slope2a = rev*slope2\n",
    "    w_slope2b = H*slope2\n",
    "    \n",
    "    x_left = 0\n",
    "    x_toe = x_left + 4*w_slope1\n",
    "    x_crest = x_toe + w_slope1\n",
    "    x_right = x_crest + 4*w_slope1    \n",
    "    w_crest = x_crest + e_crest\n",
    "    \n",
    "    x_relave = w_crest + w_slope2a\n",
    "    x_muro = w_crest + w_slope2b\n",
    "    \n",
    "    x_toe1 = w_crest-slope2*up1-e_crest-slope1*top1\n",
    "    x_toe2 = w_crest-slope2*up2-e_crest-slope1*top2\n",
    "    \n",
    "    \n",
    "    # we make it in structure mode:\n",
    "    g_i.gotostructures()\n",
    "    # make polygons, start bottom left, counter clockwise\n",
    "    \n",
    "    top_points1 = []\n",
    "    top_points1.append([x_toe2, 0])\n",
    "    top_points1.append([x_toe1, 0])\n",
    "    \n",
    "    top_points1.append([x_toe1+top1*slope1, top1])\n",
    "    top_points1.append([x_toe1+top1*slope1+e_crest, top1])\n",
    "    \n",
    "    top_points1.append([x_toe2+top2*slope1+e_crest, top2])\n",
    "    top_points1.append([x_toe2+top2*slope1, top2])\n",
    "    \n",
    "        \n",
    "    toppolygon1, topsoil1 = g_i.polygon(*top_points1)\n",
    "    \n",
    "    \n",
    "    top_points2 = []\n",
    "    top_points2.append([x_relave-slope2*up1, top1-rev])\n",
    "    top_points2.append([x_right, top1-rev])\n",
    "    top_points2.append([x_right, top2-rev])\n",
    "    top_points2.append([x_relave-slope2*up2, top2-rev])\n",
    "    \n",
    "    toppolygon2, topsoil2 = g_i.polygon(*top_points2)\n",
    "    \n",
    "    \n",
    "    return toppolygon1, toppolygon2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_model2(H, slope1, e_crest, rev, slope2, up1, up2, toplayer1, toplayer2):\n",
    "    # make geometry    \n",
    "    top_pg3, top_pg4 = make_geometry2(H, slope1, e_crest, rev, slope2, up1, up2, toplayer1, toplayer2)\n",
    "    \n",
    "    topmaterial1 = make_soilmaterial(toplayer1)\n",
    "    top_pg3.Soil.Material = topmaterial1\n",
    "    \n",
    "    topmaterial2 = make_soilmaterial(toplayer2)\n",
    "    top_pg4.Soil.Material = topmaterial2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def determine_FactorOfSafety2(H, slope1, e_crest, rev, slope2, up2, toplayer1, toplayer2, bottomlayer, step):\n",
    "    s_i.new()\n",
    "    # make the model\n",
    "    make_model(H, slope1, e_crest, rev, slope2, toplayer1, toplayer2, bottomlayer)\n",
    "    for x in range(step):\n",
    "        make_model2(H, slope1, e_crest, rev, slope2, up2*x, up2*(x+1), toplayer1, toplayer2)\n",
    "    \n",
    "    # run calculation and retrieve results \n",
    "    FoS = meshcalculateread()\n",
    "    return FoS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pendiente exterior 1:2 interior 1:2  Altura H=12: Factor de Seguridad: 1.77\n",
      "Pendiente exterior 1:2 interior 1:2  Altura H=14: Factor de Seguridad: 1.46\n",
      "Pendiente exterior 1:2 interior 1:2  Altura H=16: Factor de Seguridad: 1.29\n",
      "Pendiente exterior 1:2 interior 1:2  Altura H=18: Factor de Seguridad: 1.15\n",
      "Pendiente exterior 1:2 interior 1:2  Altura H=20: Factor de Seguridad: 1.04\n"
     ]
    }
   ],
   "source": [
    "# INPUT PARAMETERS\n",
    "up2 = 2\n",
    "n_st = 5\n",
    "\n",
    "for st in range(n_st):\n",
    "    FoS = determine_FactorOfSafety2(H, slope1, e_crest, rev, slope2, up2, toplayer1, toplayer2, bottomlayer, st)\n",
    "    print(\"Pendiente exterior 1:{} interior 1:{}  Altura H={}: Factor de Seguridad: {:.2f}\".format(slope1, slope2, H+up2*st, FoS))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# INPUT PARAMETERS\n",
    "up2 = 2\n",
    "n_st = 5\n",
    "slope1 = 2.3\n",
    "\n",
    "for st in range(n_st):\n",
    "    FoS = determine_FactorOfSafety2(H, slope1, e_crest, rev, slope2, up2, toplayer1, toplayer2, bottomlayer, st)\n",
    "    print(\"Pendiente exterior 1:{} interior 1:{}  Altura H={}: Factor de Seguridad: {:.2f}\".format(slope1, slope2, H+up2*st, FoS))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# INPUT PARAMETERS\n",
    "up2 = 2\n",
    "n_st = 5\n",
    "slope1 = 1.8\n",
    "\n",
    "for st in range(n_st):\n",
    "    FoS = determine_FactorOfSafety2(H, slope1, e_crest, rev, slope2, up2, toplayer1, toplayer2, bottomlayer, st)\n",
    "    print(\"Pendiente exterior 1:{} interior 1:{}  Altura H={}: Factor de Seguridad: {:.2f}\".format(slope1, slope2, H+up2*st, FoS))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PLAXIS Python 3",
   "language": "python",
   "name": "plaxis_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
